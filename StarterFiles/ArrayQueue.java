package StudentProjects.P3_Queues.StarterFiles;/** * A class that implements the ADT queue by using an expandable circular array * that does NOT use 1 unused location. We count entries that are enqueue'd and * dequeue'd and use those numbers to determine if the queue is empty or full.  * * @param <T> */public class ArrayQueue<T> implements QueueInterface<T>,        java.io.Serializable {    private T[] queue; // circular array of queue entries & one unused location    private int frontIndex;    private int backIndex;    private static final int DEFAULT_INITIAL_CAPACITY = 50;    int nElements;     public ArrayQueue() {        this(DEFAULT_INITIAL_CAPACITY);    } // end default constructor    // **********************************************************************************    // Constructor     //   1. Create array object (HINT: (T{}) new Object[initialCapacity+1]) and assign    //      it to queue instance variable    //   2. Initialze frontIndex to 0    //   3. Initialize backIndex to last index in array    // **********************************************************************************        public ArrayQueue(int initialCapacity) {        // Create empty Queue        System.out.println("STUB constructor: Add your code..");    }         // ************************************************************************    // ENQUEUE - Add to the back of the queue    //    if array is full (call the isArrayFull() method to check)    //         Call method to double the array size    //    Increment backIndex mod'ing by the queue length     //    increment number of elements    //    Assign newEntry to queue[backIndex]    // ************************************************************************    @Override    public void enqueue(T newEntry) {       // Add to circular queue       System.out.println("STUB enqueue method: Add your code..");            } // end enqueue     // ************************************************************************     // getFront() - Returns front element in queue (but does not remove)     //    if queue is not empty (call method isEmpty to check)     //       set front to queue at frontIndex     // ************************************************************************    @Override    public T getFront() {        T front = null;        System.out.println("STUB getFront method: Add your code..");        return front;    } // end getFront     // ************************************************************************     // dequeue() - Removes front element from queue     //    if queue is not empty (call method isEmpty() to check)     //       set front to queue at frontIndex     //       set queue at frontIndex to null     //       increment frontIndex mod'ing by the queue length     //       decrement the number of elements in queue     // ************************************************************************    @Override    public T dequeue() {        T front = null;        // ADD code to set front to first element in queue and then remove first element        System.out.println("STUB dequeue method: Add your code..");                return front;    } // end dequeue  // ************************************************************************    // isEmpty() - Tests if queue is empty    //   Returns true is the nElements is 0    // ************************************************************************    @Override    public boolean isEmpty() {      boolean result = true;  // default : must add test            System.out.println("STUB isEMpty method: Add your code..");            return result;      } // end isEmpty      // ************************************************************************    // CLEAR()  - Removes everything from the queue    //   if queue is not empty (call isEmpty method to check)    //     Loop through the array from frontIndex to backIndex    //          set the queue element at current index to null    //     Re-initialize the frontIndex, backIndex and nElements    // ************************************************************************      @Override    public void clear() {                System.out.println("STUB clear method: Add your code..");            } // end clear      // ************************************************************************    // isArrayFull() method    //   Returns true if nElements is the same as the queue length    // ************************************************************************    private boolean isArrayFull() {      boolean result = false;  // default : must add test            System.out.println("STUB isArrayFull method: Add your code..");            return result;      } // ************************************************************************    // doubleArray()    //  1. declares oldQueue reference of type T[]     //  2. Store queue reference in oldQueue    //  3. Create new array object that's twice the size of the old queue and store     //     the reference returned by "new" in queue    //  4. Loop through oldQueue using index    //       assign oldQueue[frontIndex] to queue[index]    //       increment frontIndex mod'ing by old size    //  5. Set frontIndex to 0      //  6. set backIndex to old size - 1    // ************************************************************************        private void doubleArray() {        System.out.println("STUB method: Add your code..");    } // end doubleArray        // ************************************************************************    // toString() method   - Print out the contents of the string    //   1. Declare outString of type String and initialize to empty string    //   2. If queue is not empty (call method to check)    //   3.   Declare index and set it to frontIndex    //   4.   While index is not equal to backIndex    //            Append element at queue[index] to outString    //            Increment index mod'ing by queue.length    //   5.   Append element at queue[index] to outString (to get the last element    //   6. Return outString    //                // ************************************************************************         @Override    public String toString() {        String outString = " ";        System.out.println("STUB toString method: Add your code..");              return outString;    }    // ************************************************************************    // MAIN     //    test methods of the ArrayQueue class before preceeding to use it    //    for other purposes.  You'll need to add code before this will run.     // ************************************************************************    public static void main(String[] args) {        ArrayQueue<String> myQ = new ArrayQueue<>(10);        myQ.enqueue("first");        myQ.enqueue("second");        System.out.println("Queue: " + myQ);        // Remove elements until queue is empty        while (!myQ.isEmpty()) {            System.out.println("Removed: " + myQ.dequeue());        }                for (int i=0;i<12;i++)            myQ.enqueue("" + i++);                System.out.println("Queue: " + myQ);    }}  // end ArrayQueue